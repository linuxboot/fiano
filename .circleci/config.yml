# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
workflows:
  version: 2
  build_and_test:
    jobs:
      - clean-code
      - test:
          requires:
            - clean-code
      - race:
          requires:
            - clean-code
      - coverage:
          requires:
            - clean-code
      - check_licenses:
          requires:
            - clean-code
jobs:
  clean-code:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/linuxboot/fiano
    steps:
      - checkout
      - run:
          name: Install golint
          command: go get -u golang.org/x/lint/golint
      - run:
          name: Install ineffassign
          command: go get github.com/gordonklaus/ineffassign
      - run:
          name: Check dependencies
          environment:
            - GO111MODULE: "on"
          command: |
            go mod download
            go mod verify
      - run:
          name: gofmt
          command: test -z "$(gofmt -s -l cmds pkg)"
      - run:
          name: golint
          command: golint --set_exit_status $(go list ./... | grep -v /vendor/)
  test:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/linuxboot/fiano
    environment:
      - GO111MODULE: "on"
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Test all
          command: go test -a -ldflags '-s' ./...
      - run:
          name: Test coverage
          command: go test -cover ./...
  race:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/linuxboot/fiano
    environment:
      - GO111MODULE: "on"
      - CGO_ENABLED: 1
    steps:
      - checkout
      - run:
          name: Race detector
          command: go test -race ./...
  coverage:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/linuxboot/fiano
    environment:
      - GO111MODULE: "on"
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Test Coverage
          command: |
            set -e
            > coverage.txt
            for d in $(go list ./... | grep -v vendor); do
                go test -coverprofile=profile.out -covermode=atomic $d
                if [ -f profile.out ]; then
                    cat profile.out >> coverage.txt
                    rm profile.out
                fi
            done
      - run:
          name: Report Coverage
          when: on_success
          command: bash <(curl -s https://codecov.io/bash)
  check_licenses:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/linuxboot/fiano
    environment:
      - GO111MODULE: "on"
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Check licenses
          command: go run scripts/checklicenses/checklicenses.go
